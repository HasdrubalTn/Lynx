name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: lynx
          POSTGRES_USER: lynx
          POSTGRES_PASSWORD: example
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: |
          web/AdminApp/node_modules
          web/WebApp/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET projects
      run: dotnet build --no-restore --configuration Release

    - name: Run .NET tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: Install Node dependencies (AdminApp)
      working-directory: web/AdminApp
      run: npm ci

    - name: Build AdminApp
      working-directory: web/AdminApp
      run: npm run build

    - name: Install Node dependencies (WebApp)
      working-directory: web/WebApp
      run: npm ci

    - name: Build WebApp
      working-directory: web/WebApp
      run: npm run build

    - name: Upload .NET test coverage
      uses: codecov/codecov-action@v4
      with:
        files: coverage.cobertura.xml
        fail_ci_if_error: false

    - name: Docker build test
      run: |
        docker compose build --no-cache
        docker compose config

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Run security scan
      run: |
        echo "üîç Checking for vulnerable packages..."
        dotnet list package --vulnerable --include-transitive
        echo "üîç Checking for deprecated packages..."
        dotnet list package --deprecated

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker compose -f docker-compose.yml -f docker-compose.staging.yml build

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        # Add actual deployment steps here for Hostinger VPS
        # This could involve:
        # - Pushing to container registry
        # - SSH to VPS and deploy
        # - Run health checks

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging"
        # Add smoke tests here

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        # Add actual production deployment steps here

    - name: Run health checks
      run: |
        echo "üè• Running post-deployment health checks"
        # Add production health checks here
